{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning Work in Progress, not ready for general use. ACCESSHub is a portal to all documentation pertinent to the Australian Earth System Simulator, ACCESS, and its model components. This portal goal is primarily to link to documentations hosted on other sites. It is not intended to host the documentation itself. The site contains: pages for each major category of community documentation an ACCESS NRI tab for the documentation supported by ACCESS NRI an How to contribute tab to learn how to use the portal and add links to your documentation.","title":"Welcome"},{"location":"#work-in-progress-not-ready-for-general-use","text":"ACCESSHub is a portal to all documentation pertinent to the Australian Earth System Simulator, ACCESS, and its model components. This portal goal is primarily to link to documentations hosted on other sites. It is not intended to host the documentation itself. The site contains: pages for each major category of community documentation an ACCESS NRI tab for the documentation supported by ACCESS NRI an How to contribute tab to learn how to use the portal and add links to your documentation.","title":"Work in Progress, not ready for general use."},{"location":"ACCESS-NRI/ACCESS-NRI/","text":"Just a place holder for the moment. It will probably need several files.","title":"ACCESS NRI"},{"location":"Community/Bathymetry/","text":"Will be filled one day...","title":"Generate Bathymetry"},{"location":"Help/How_to_contribute/","text":"Abstract The aim of this How to is to enable you to: add or modify a link to a new documentation in an existing page add a new page or tab with new documentation This documentation is based on the Material for Mkdocs theme. Please see the documentation for the theme or for Mkdocs for a full explanation of all the capabilities. The documentation is written in Markdown format. Please see this cheat sheet for a quick reference to the base syntax. Please note that Material for Mkdocs extends that syntax.","title":"How to contribute"},{"location":"Help/change_navigation/","text":"Change the navigation Structure of the repository The important elements of the repository to know about before modifying the navigation are: docs/ folder: this folder contains all the documentation pages. There is an index.md file for the Welcome page, one folder per tab on the site and an assets/ folder to store images used in the documentation. mkdocs.yml : it is a YAML formatted file, hence the .yml extension. The site navigation is defined in this file as well as options for the styling of the site. Info YAML is a popular choice for configuration files, as it is a simple way of encoding data structures in a text file. See this short tutorial . A simple example The easiest way to explain how the navigation is defined is to look at an example. Let's say mkdocs.yml contains: nav : - Welcome : index.md - ACCESS NRI : ACCESS-NRI/ACCESS-NRI.md - Community : - Generate Bathymetry : Community/Bathymetry.md - How to contribute : - How to contribute : Help/How_to_contribute.md - Setup : Help/contribution_setup.md - Modify the documentation : Help/modify_documentation.md - Change the navigation : Help/change_navigation.md The top level category names define the tabs in the header bar. So here we have the tabs: \"Welcome\", \"ACCESS NRI\", \"Community\" and \"How to contribute\". It also defines the name of the top section under each tab. The second level of categories indicate the name of each page under that section. So the \"ACCESS NRI\" tab has the text directly under the section \"ACCESS NRI\". The \"Community\" tab has a section called \"Community\" that contains one page: \"Generate Bathymetry\". Finally, the \"How to contribute\" tab has 1 section \"How to contribute\" with 4 pages. The filenames indicate the path to the file relative to the docs/ folder containing the text for each page. It is recommended to use the title of each file (i.e. the Header 1) as the name of the page and the filename. Add sections to a tab It is possible to define several sections per tab by using more levels of indentation. For example, to add a \"My example\" section to the \"How to contribute\" tab: nav : - Welcome : index.md - ACCESS NRI : ACCESS-NRI/ACCESS-NRI.md - Community : - Generate Bathymetry : Community/Bathymetry.md - How to contribute : - How to contribute : Help/How_to_contribute.md - Setup : Help/contribution_setup.md - Modify the documentation : Help/modify_documentation.md - Change the navigation : Help/change_navigation.md - My example : - Beautiful example : Help/beautiful_example.md will create this navigation:","title":"Change the navigation"},{"location":"Help/change_navigation/#change-the-navigation","text":"","title":"Change the navigation"},{"location":"Help/change_navigation/#structure-of-the-repository","text":"The important elements of the repository to know about before modifying the navigation are: docs/ folder: this folder contains all the documentation pages. There is an index.md file for the Welcome page, one folder per tab on the site and an assets/ folder to store images used in the documentation. mkdocs.yml : it is a YAML formatted file, hence the .yml extension. The site navigation is defined in this file as well as options for the styling of the site. Info YAML is a popular choice for configuration files, as it is a simple way of encoding data structures in a text file. See this short tutorial .","title":"Structure of the repository"},{"location":"Help/change_navigation/#a-simple-example","text":"The easiest way to explain how the navigation is defined is to look at an example. Let's say mkdocs.yml contains: nav : - Welcome : index.md - ACCESS NRI : ACCESS-NRI/ACCESS-NRI.md - Community : - Generate Bathymetry : Community/Bathymetry.md - How to contribute : - How to contribute : Help/How_to_contribute.md - Setup : Help/contribution_setup.md - Modify the documentation : Help/modify_documentation.md - Change the navigation : Help/change_navigation.md The top level category names define the tabs in the header bar. So here we have the tabs: \"Welcome\", \"ACCESS NRI\", \"Community\" and \"How to contribute\". It also defines the name of the top section under each tab. The second level of categories indicate the name of each page under that section. So the \"ACCESS NRI\" tab has the text directly under the section \"ACCESS NRI\". The \"Community\" tab has a section called \"Community\" that contains one page: \"Generate Bathymetry\". Finally, the \"How to contribute\" tab has 1 section \"How to contribute\" with 4 pages. The filenames indicate the path to the file relative to the docs/ folder containing the text for each page. It is recommended to use the title of each file (i.e. the Header 1) as the name of the page and the filename.","title":"A simple example"},{"location":"Help/change_navigation/#add-sections-to-a-tab","text":"It is possible to define several sections per tab by using more levels of indentation. For example, to add a \"My example\" section to the \"How to contribute\" tab: nav : - Welcome : index.md - ACCESS NRI : ACCESS-NRI/ACCESS-NRI.md - Community : - Generate Bathymetry : Community/Bathymetry.md - How to contribute : - How to contribute : Help/How_to_contribute.md - Setup : Help/contribution_setup.md - Modify the documentation : Help/modify_documentation.md - Change the navigation : Help/change_navigation.md - My example : - Beautiful example : Help/beautiful_example.md will create this navigation:","title":"Add sections to a tab"},{"location":"Help/commit_signing/","text":"Commit signing It is trivially easy to impersonate another user when committing to git. This does not lead to elevated privileges, but could be exploited in a social hack, causing commits to be accepted based on an assumption of identity. Code signing gives others confidence that code commits come from a trusted source . Code signing is not required to contribute to ACCESSHub, but it is for contributing to most repositories in the ACCESS-NRI Organisation . GitHub is the code hosting platform used by ACCESS-NRI, and GitHub supports code signing. You know when a commit is correctly signed because the commit has a \"Verified\" badge: Signing code with SSH keys Code signing with GPG has been supported for some time, but it is somewhat complicated to configure and places a burden to become familiar with and maintain GPG keys. Since version 2.34.0 git supports code signing with ssh keys. Most people are familiar with using ssh keys for ssh access, which makes configuring code signing more straightforward. Info git 2.37.3 is available as a module on gadi ( module load git/2.37.3 ) First add your signing key to GitHub . Either use an existing SSH key, or create a new one. Make sure your key is on your keychain and then login to gadi with key forwarding. Info Adding a key to your ssh agent is platform dependent Apple OSX: ssh-add --apple-use-keychain <path to keychain> Linux : ssh-add <path to keychain> To automatically sign all commits and tags in all repositories with your ssh key: git config --global commit.gpgsign true git config --global tag.gpgsign true git config --global gpg.format ssh git config --global user.signingKey <ssh public key signature> Note Ensure you use a modern enough version of git otherwise you will get errors if you try and sign commits Resources https://blog.dbrgn.ch/2021/11/16/git-ssh-signatures/ https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-ssh-key https://calebhearth.com/sign-git-with-ssh","title":"Signing your commits"},{"location":"Help/commit_signing/#commit-signing","text":"It is trivially easy to impersonate another user when committing to git. This does not lead to elevated privileges, but could be exploited in a social hack, causing commits to be accepted based on an assumption of identity. Code signing gives others confidence that code commits come from a trusted source . Code signing is not required to contribute to ACCESSHub, but it is for contributing to most repositories in the ACCESS-NRI Organisation . GitHub is the code hosting platform used by ACCESS-NRI, and GitHub supports code signing. You know when a commit is correctly signed because the commit has a \"Verified\" badge:","title":"Commit signing"},{"location":"Help/commit_signing/#signing-code-with-ssh-keys","text":"Code signing with GPG has been supported for some time, but it is somewhat complicated to configure and places a burden to become familiar with and maintain GPG keys. Since version 2.34.0 git supports code signing with ssh keys. Most people are familiar with using ssh keys for ssh access, which makes configuring code signing more straightforward. Info git 2.37.3 is available as a module on gadi ( module load git/2.37.3 ) First add your signing key to GitHub . Either use an existing SSH key, or create a new one. Make sure your key is on your keychain and then login to gadi with key forwarding. Info Adding a key to your ssh agent is platform dependent Apple OSX: ssh-add --apple-use-keychain <path to keychain> Linux : ssh-add <path to keychain> To automatically sign all commits and tags in all repositories with your ssh key: git config --global commit.gpgsign true git config --global tag.gpgsign true git config --global gpg.format ssh git config --global user.signingKey <ssh public key signature> Note Ensure you use a modern enough version of git otherwise you will get errors if you try and sign commits","title":"Signing code with SSH keys"},{"location":"Help/commit_signing/#resources","text":"https://blog.dbrgn.ch/2021/11/16/git-ssh-signatures/ https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-ssh-key https://calebhearth.com/sign-git-with-ssh","title":"Resources"},{"location":"Help/contribution_setup/","text":"Setup Get the documentation source You need to clone the ACCESSHub Community repository to your local machine: git clone git@github.com:ACCESS-NRI-Community/ACCESSHub.git Install Material for Mkdocs (not required) If you would like to preview the documentation locally to check your modifications before submitting them to the ACCESSHub site and you are comfortable with installing Python packages, you will need to install Material for Mkdocs. However, this is not required as there is a preview available as part of the submission process . You can install Material for Mkdocs on your local machine with pip or conda : using pip pip install mkdocs-material using conda conda create -n doc -c conda-forge mkdocs-material","title":"Setup"},{"location":"Help/contribution_setup/#setup","text":"","title":"Setup"},{"location":"Help/contribution_setup/#get-the-documentation-source","text":"You need to clone the ACCESSHub Community repository to your local machine: git clone git@github.com:ACCESS-NRI-Community/ACCESSHub.git","title":"Get the documentation source"},{"location":"Help/contribution_setup/#install-material-for-mkdocs-not-required","text":"If you would like to preview the documentation locally to check your modifications before submitting them to the ACCESSHub site and you are comfortable with installing Python packages, you will need to install Material for Mkdocs. However, this is not required as there is a preview available as part of the submission process . You can install Material for Mkdocs on your local machine with pip or conda : using pip pip install mkdocs-material using conda conda create -n doc -c conda-forge mkdocs-material","title":"Install Material for Mkdocs (not required)"},{"location":"Help/modify_documentation/","text":"Modify the documentation There are two ways to modify the documentation: direct edit on GitHub. This method is adequate for small modifications to a single file. local edit on your local computer. This method is recommended for large modifications. Open an issue For all additions or modifications to the ACCESSHub site, it is recommended to start by opening an Issue in the ACCESSHub GitHub repository. After creation, please assign the Issue to yourself in the right-hand side panel if you intend on working on the issue. Edit directly on GitHub For a very simple change, the easiest is to go to the ACCESSHub site and navigate to the page you want to modify. At the right of the title, you will see a pen icon . When you click on this icon, your browser will open the file in GitHub allowing you to edit the file. Enter your modification in the main pane. Then add a commit message in the Commit changes box. Where to write your commit message Important You then need to choose to create a new branch and start a pull request. The main branch of the repository is protected and nobody can write to it directly. When creating the pull request, make sure to add the text: Closes #X to the description, where X is the issue number related to this change. This will link the pull request and the issue together and the issue will be automatically closed once the pull request is accepted. This will also automatically build a preview of the documentation with your proposed changes . Then ask for a review using the Reviewer menu on the right-hand side panel. You will be notified by email of any subsequent comment, request or action from the reviewer on this pull request. Please make sure you take any action required by the reviewer or your modification will not be accepted into the ACCESSHub site. Edit locally on your computer If you prefer to work locally on your computer (e.g. to preview the result of your modification locally before submitting it to the documentation), you will need to follow the usual series of steps when contributing to Open Source developments: open an Issue clone the repository locally start a branch to work on linked to the Issue commit your modifications to that branch and push to GitHub open a pull request between the main branch and your branch ask for reviews and reply to requests for changes If you don't know how to do these steps, please refer to the Collaborating on GitHub section . Tip If you have problems finding the page you need to edit, the easiest way is to head to the ACCESSHub site. If you click on the pen icon at the top right of each page title, you will open a GitHub page showing you the path to the file you want to edit. Previewing your changes locally Note You can only preview your local changes if you have installed mkdocs-material on your computer. If you have installed mkdocs-material via conda, make sure you activate the correct environment first MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. To start the server, open a terminal and navigate to your ACCESSHub local repository. Now type: mkdocs serve Your documentation will be built on http://127.0.0.1:8000. Open this URL in your browser to see a preview of the documentation. The URL is given in the terminal when running the mkdocs serve command. Make sure you keep the command running so as to see live updates on saving your modifications. Preview of the documentation When a pull request is opened or updated, GitHub will automatically build a preview of the documentation that includes the proposed changes. In the pull request, you will see the link to the preview appear in this fashion: Info It can take a while for the preview to build. If you open the preview and it looks completely broken or if it hasn't updated from additional modifications in the pull request, it probably means the site hasn't finished building yet. If you wait a little bit and refresh the page, it should fix it.","title":"Modify the documentation"},{"location":"Help/modify_documentation/#modify-the-documentation","text":"There are two ways to modify the documentation: direct edit on GitHub. This method is adequate for small modifications to a single file. local edit on your local computer. This method is recommended for large modifications.","title":"Modify the documentation"},{"location":"Help/modify_documentation/#open-an-issue","text":"For all additions or modifications to the ACCESSHub site, it is recommended to start by opening an Issue in the ACCESSHub GitHub repository. After creation, please assign the Issue to yourself in the right-hand side panel if you intend on working on the issue.","title":"Open an issue"},{"location":"Help/modify_documentation/#edit-directly-on-github","text":"For a very simple change, the easiest is to go to the ACCESSHub site and navigate to the page you want to modify. At the right of the title, you will see a pen icon . When you click on this icon, your browser will open the file in GitHub allowing you to edit the file. Enter your modification in the main pane. Then add a commit message in the Commit changes box. Where to write your commit message Important You then need to choose to create a new branch and start a pull request. The main branch of the repository is protected and nobody can write to it directly. When creating the pull request, make sure to add the text: Closes #X to the description, where X is the issue number related to this change. This will link the pull request and the issue together and the issue will be automatically closed once the pull request is accepted. This will also automatically build a preview of the documentation with your proposed changes . Then ask for a review using the Reviewer menu on the right-hand side panel. You will be notified by email of any subsequent comment, request or action from the reviewer on this pull request. Please make sure you take any action required by the reviewer or your modification will not be accepted into the ACCESSHub site.","title":"Edit directly on GitHub"},{"location":"Help/modify_documentation/#edit-locally-on-your-computer","text":"If you prefer to work locally on your computer (e.g. to preview the result of your modification locally before submitting it to the documentation), you will need to follow the usual series of steps when contributing to Open Source developments: open an Issue clone the repository locally start a branch to work on linked to the Issue commit your modifications to that branch and push to GitHub open a pull request between the main branch and your branch ask for reviews and reply to requests for changes If you don't know how to do these steps, please refer to the Collaborating on GitHub section . Tip If you have problems finding the page you need to edit, the easiest way is to head to the ACCESSHub site. If you click on the pen icon at the top right of each page title, you will open a GitHub page showing you the path to the file you want to edit.","title":"Edit locally on your computer"},{"location":"Help/modify_documentation/#previewing-your-changes-locally","text":"Note You can only preview your local changes if you have installed mkdocs-material on your computer. If you have installed mkdocs-material via conda, make sure you activate the correct environment first MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. To start the server, open a terminal and navigate to your ACCESSHub local repository. Now type: mkdocs serve Your documentation will be built on http://127.0.0.1:8000. Open this URL in your browser to see a preview of the documentation. The URL is given in the terminal when running the mkdocs serve command. Make sure you keep the command running so as to see live updates on saving your modifications.","title":"Previewing your changes locally"},{"location":"Help/modify_documentation/#preview-of-the-documentation","text":"When a pull request is opened or updated, GitHub will automatically build a preview of the documentation that includes the proposed changes. In the pull request, you will see the link to the preview appear in this fashion: Info It can take a while for the preview to build. If you open the preview and it looks completely broken or if it hasn't updated from additional modifications in the pull request, it probably means the site hasn't finished building yet. If you wait a little bit and refresh the page, it should fix it.","title":"Preview of the documentation"},{"location":"Help/submit_changes_to_github/","text":"Submit changes to GitHub This is a general explanation on how to contribute to a project hosted on GitHub. Remember, some projects may have set up some special rules which you will need to follow. Note Some editors can connect to GitHub and enable you to perform some of these steps directly from the editor. Feel free to do so instead of following the indications below. Create an Issue For all additions or modifications to a repository on GitHub, it is recommended to start by opening an Issue in the GitHub repository. After creation, please assign the Issue to yourself in the right-hand side panel if you intend on working on the issue. Create a branch from your issue On GitHub navigate to your issue page. In the right-hand side panel, choose to create a branch for your issue. Make sure to follow the branch naming rules set by the repository. In general, you will be asked to reference the issue number in the branch name. Clone the repository to your computer You need to create a local copy of the repository for you to work on. Generally, this is done with: git clone <repo_url> where <repo_url> is the path to the repository. It can be the HTTPS path or a SSH path depending on your setup. We recommend setting up SSH keys and use the SSH path for the repository. Create a local branch to follow the remote branch On your local computer, in the clone repository, make sure your local copy is up to date with GitHub: git pull Then, create a local branch that follows the remote branch and checkout the new branch: git checkout <branch_name> You can then start modifying the documentation files. Submit your changes Once you are satisfied with your modifications, you will need to: commit your changes locally on your branch push your branch to GitHub on GitHub, open a pull request between the main branch and your branch. In the pull request description, make sure to add the text Closes #X where X is the Issue number associated with your modifications. This creates cross-references between the Issue and pull request, and links them so that the Issue is automatically closed when the pull request is accepted. Then ask for a review using the Reviewer menu on the right-hand side panel . You will be notified by email of any subsequent comment, request or action from the reviewer on this pull request. Please make sure you take any action required by the reviewer or your modification will not be accepted into the ACCESSHub site.","title":"Submit changes to GitHub"},{"location":"Help/submit_changes_to_github/#submit-changes-to-github","text":"This is a general explanation on how to contribute to a project hosted on GitHub. Remember, some projects may have set up some special rules which you will need to follow. Note Some editors can connect to GitHub and enable you to perform some of these steps directly from the editor. Feel free to do so instead of following the indications below.","title":"Submit changes to GitHub"},{"location":"Help/submit_changes_to_github/#create-an-issue","text":"For all additions or modifications to a repository on GitHub, it is recommended to start by opening an Issue in the GitHub repository. After creation, please assign the Issue to yourself in the right-hand side panel if you intend on working on the issue.","title":"Create an Issue"},{"location":"Help/submit_changes_to_github/#create-a-branch-from-your-issue","text":"On GitHub navigate to your issue page. In the right-hand side panel, choose to create a branch for your issue. Make sure to follow the branch naming rules set by the repository. In general, you will be asked to reference the issue number in the branch name.","title":"Create a branch from your issue"},{"location":"Help/submit_changes_to_github/#clone-the-repository-to-your-computer","text":"You need to create a local copy of the repository for you to work on. Generally, this is done with: git clone <repo_url> where <repo_url> is the path to the repository. It can be the HTTPS path or a SSH path depending on your setup. We recommend setting up SSH keys and use the SSH path for the repository.","title":"Clone the repository to your computer"},{"location":"Help/submit_changes_to_github/#create-a-local-branch-to-follow-the-remote-branch","text":"On your local computer, in the clone repository, make sure your local copy is up to date with GitHub: git pull Then, create a local branch that follows the remote branch and checkout the new branch: git checkout <branch_name> You can then start modifying the documentation files.","title":"Create a local branch to follow the remote branch"},{"location":"Help/submit_changes_to_github/#submit-your-changes","text":"Once you are satisfied with your modifications, you will need to: commit your changes locally on your branch push your branch to GitHub on GitHub, open a pull request between the main branch and your branch. In the pull request description, make sure to add the text Closes #X where X is the Issue number associated with your modifications. This creates cross-references between the Issue and pull request, and links them so that the Issue is automatically closed when the pull request is accepted. Then ask for a review using the Reviewer menu on the right-hand side panel . You will be notified by email of any subsequent comment, request or action from the reviewer on this pull request. Please make sure you take any action required by the reviewer or your modification will not be accepted into the ACCESSHub site.","title":"Submit your changes"}]}